from bytes.create_data.generate_dataset import get_dataset
from sklearn.metrics import accuracy_score, precision_score, f1_score, recall_score, confusion_matrix

import torch
import torch.utils.data
import numpy as np
import matplotlib.pyplot as plt


def draw_confusion_matrix(mat):
    np.set_printoptions(precision=3)
    # normalize confusion matrix
    mat = mat.astype('float') / mat.sum(axis=1)[:, np.newaxis]
    plt.figure(figsize=(12, 8), dpi=120)

    index = np.arange(9)
    x, y = np.meshgrid(index, index)
    for x_val, y_val in zip(x.flatten(), y.flatten()):
        # set the values in the graphic of confusion matrix
        value = mat[y_val][x_val]
        plt.text(x_val, y_val, "%0.3f" % value, color='red', fontsize=7, va='center', ha='center')

    tick_marks = np.array(range(9)) + 0.5

    plt.gca().set_xticks(tick_marks, minor=True)
    plt.gca().set_yticks(tick_marks, minor=True)
    plt.gca().xaxis.set_ticks_position('none')
    plt.gca().yaxis.set_ticks_position('none')
    plt.grid(True, which='minor', linestyle='-')
    plt.gcf().subplots_adjust(bottom=0.15)

    plt.imshow(mat, interpolation='nearest', cmap=plt.cm.binary)
    plt.title("Confusion Matrix")
    plt.colorbar()
    labels = ['Ramnit', 'Lollipop', 'Kelihos_ver3', 'Vundo', 'Simda', 'Tracur', 'Kelihos_ver1', 'Obfuscator.ACY',
              'Gatak']
    x_location = np.array(range(9))
    plt.xticks(x_location, labels, rotation=90)
    plt.yticks(x_location, labels)
    plt.ylabel('True Label')
    plt.xlabel('Predicted Label')
    plt.savefig('confusion_matrix.png', format='png')
    plt.show()


def test_model(model_path):
    """
    Test the specified model.
    :param model_path: The path to load model.
    """
    test_path = input("Please input the path of test data: ")
    if test_path[-1] != '/':
        test_path += '/'

    dataset = get_dataset(test_path)

    model = torch.load(model_path).cuda()

    test_loader = torch.utils.data.dataloader.DataLoader(dataset, batch_size=28)

    model.eval()
    with torch.no_grad():
        y_prediction = []
        y = dataset.labels
        for i, data in enumerate(test_loader):
            x, _ = data

            x = x.cuda()

            output = model(x)

            y_prediction += list(torch.argmax(output, 1).cpu())

        y_prediction = list(map(int, y_prediction))

        confusion_mat = confusion_matrix(y_true=y, y_pred=y_prediction)
        accuracy = accuracy_score(y_true=y, y_pred=y_prediction)
        precision = precision_score(y_true=y, y_pred=y_prediction, average='weighted')
        recall = recall_score(y_true=y, y_pred=y_prediction, average='weighted')
        f1 = f1_score(y_true=y, y_pred=y_prediction, average='weighted')

        print(confusion_mat)
        draw_confusion_matrix(confusion_mat)
        print('accuracy:', accuracy)
        print('precision:', precision)
        print('recall:', recall)
        print('f1_score', f1)
