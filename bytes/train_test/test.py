from bytes.create_data.generate_dataset import get_dataset
from sklearn.metrics import accuracy_score, precision_score, f1_score, confusion_matrix

import torch
import torch.utils.data


def test_model(model_path):
    """
    Test the specified model.
    :param model_path: The path to load model.
    """
    test_path = input("Please input the path of test data: ")
    if test_path[-1] != '/':
        test_path += '/'

    dataset = get_dataset(test_path)

    model = torch.load(model_path).cuda()

    test_loader = torch.utils.data.dataloader.DataLoader(dataset, batch_size=28)

    model.eval()
    with torch.no_grad():
        y_prediction = []
        y = dataset.labels
        for i, data in enumerate(test_loader):
            x, _ = data

            x = x.cuda()

            output = model(x)

            y_prediction += list(torch.argmax(output, 1).cpu())

        y_prediction = list(map(int, y_prediction))

        confusion_mat = confusion_matrix(y_true=y, y_pred=y_prediction)
        accuracy = accuracy_score(y_true=y, y_pred=y_prediction)
        precision = precision_score(y_true=y, y_pred=y_prediction, average='weighted')
        f1 = f1_score(y_true=y, y_pred=y_prediction, average='weighted')

        print('confusion matrix:\n', confusion_mat)
        print('accuracy:', accuracy)
        print('precision:', precision)
        print('f1_score', f1)
