from bytes.create_data.generate_dataset import get_dataset

import torch
import torch.utils.data


def test_model(model_path):
    """
    Test the specified model.
    :param model_path: The path to load model.
    :return: The accuracy of the model.
    """
    test_path = input("Please input the path of test data: ")
    if test_path[-1] != '/':
        test_path += '/'

    dataset = get_dataset(test_path)

    model = torch.load(model_path).cuda()

    test_loader = torch.utils.data.dataloader.DataLoader(dataset, batch_size=8)

    # Calculate the accuracy
    correct = torch.zeros(1).squeeze().cuda()
    total = torch.zeros(1).squeeze().cuda()

    model.eval()
    for i, data in enumerate(test_loader):
        x, y = data

        x = x.cuda()
        y = y.cuda()

        output = model(x)

        prediction = torch.argmax(output, 1)

        correct += (prediction == y.long()).sum().float()
        total += len(y)
        print(output)
        print(y)

    accuracy = (correct / total).cpu()

    print(accuracy)

    return accuracy
