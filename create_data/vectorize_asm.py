# -*- coding: utf-8 -*-
import numpy as np

from gensim.models.doc2vec import Doc2Vec, TaggedDocument
from create_data.get_opcode import *


def my_doc2vec(document_path, model_path):
	"""
	Generate a doc2vec model and save it.
	:param document_path: The path of all .asm files, which is used to generate the document of Doc2Vec model.
	:param model_path: The path of Doc2Vec model.
	:return: The doc2vec model.
	"""
	# Generate the documents, which is used in Doc2Vec model.
	all_opcode_seqs = get_all_opcode_seqs(document_path)
	documents = [TaggedDocument(doc, [i]) for i, doc in enumerate(all_opcode_seqs)]

	# Generate the Doc2Vec model.
	model = Doc2Vec(documents, workers=4)

	# Save the Doc2Vec model.
	if not os.path.exists(model_path):
		os.mkdir(model_path)
	model.save(model_path + 'doc2vec.model')

	return model


def vectorize_asm(document_path, asm_path, model_path, vec_path):
	"""
	Use Doc2Vec model to vectorize all .asm files and save them as .asm.model file.
	The dimension of vectorized .asm files is 1*100.
	:param document_path: The path of all .asm files, which is used to construct document.
	:param asm_path: The path of .asm files.
	:param model_path: The path of Doc2Vec model.
	:param vec_path: The path of .asm.vec files.
	"""
	# Generate the Doc2Vec model
	model = my_doc2vec(document_path, model_path)

	if not os.path.exists(vec_path):
		os.mkdir(vec_path)

	dirs = os.listdir(asm_path)
	for dir in dirs:
		if not os.path.exists(vec_path + dir):
			os.mkdir(vec_path + dir)
		asm_file_list = os.listdir(asm_path + dir)
		for file in asm_file_list:
			vector = model.infer_vector(get_opcode_sequence(asm_path + dir + '/' + file))
			np.savetxt(vec_path + dir + '/' + file + '.vec', vector, '%1.8f')
