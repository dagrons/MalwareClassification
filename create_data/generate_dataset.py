import pandas as pd
import shutil

from create_data.vectorize_asm import *


def split_dataset(src_path, dest_path, label_path):
	"""
	Split all .asm files into 9 categories, each category representing a family.
	:param src_path: The path of all .asm files.
	:param dest_path: The path of 9 categories.
	:param label_path: The path of labels.csv.
	"""
	# Read labels.csv
	df = pd.read_csv(label_path)

	if not os.path.exists(dest_path):
		os.mkdir(dest_path)
	# Split dataset into 9 categories
	for i in range(1, 10):

		filename_list = df.Id[df['Class'] == i].tolist()
		# Delete the same file names
		filename_list = list(set(filename_list))
		if not os.path.exists(dest_path + str(i)):
			os.mkdir(dest_path + str(i))
		for file_name in filename_list:
			shutil.move(src_path + file_name + '.asm', dest_path + str(i) + '/' + file_name + '.asm')

	os.rmdir(src_path)


def generate_train_test(vec_path):
	"""
	Split all .asm.vec files into training samples and test samples.
	:param vec_path: The path of all .asm.vec files.
	"""
	train_path = '/'.join(vec_path.split('/')[:-1]) + "/train/"
	test_path = '/'.join(vec_path.split('/')[:-1]) + "/test/"

	dirs = os.listdir(vec_path)
	for dir in dirs:
		files = os.listdir(vec_path + dir)

		num = len(files)
		train_num = int(num * 0.8)

		if not os.path.exists(train_path):
			os.mkdir(train_path)
		if not os.path.exists(test_path):
			os.mkdir(test_path)
		if not os.path.exists(train_path + dir):
			os.mkdir(train_path + dir)
		if not os.path.exists(test_path + dir):
			os.mkdir(test_path + dir)

		for vec in files[0:train_num]:
			shutil.move(vec_path + dir + '/' + vec, train_path + dir + '/' + vec)
		for vec in files[train_num:]:
			shutil.move(vec_path + dir + '/' + vec, test_path + dir + '/' + vec)

		os.rmdir(vec_path + dir)


def get_dataset(vec_path):
	"""
	Get dataset from training path or test path.
	:param vec_path: The path of .asm.vec files.
	:return: Training dataset or test dataset.
	"""
	x = []
	y = []
	dirs = os.listdir(vec_path)
	for dir in dirs:
		for vec in os.listdir(vec_path + dir):
			x.append(np.loadtxt(vec_path + dir + '/' + vec))
			y.append(int(dir) - 1)

	return x, y


if __name__ == "__main__":
	# Generate the Doc2Vec model
	# document_path = 'H:/malware/dataset/'
	# doc2vec_model_path = 'H:/malware/model/doc2vec.model'
	# vec_path = 'E:/malware/vec/'
	# my_doc2vec(document_path, doc2vec_model_path)
	# split_dataset('H:/malware/dataset/', 'H:/malware/data/', 'H:/malware/labels.csv')
	# vectorize_asm('H:/malware/data/', 'H:/malware/vec/', doc2vec_model_path)
	# generate_train_test(vec_path)
	x_train, y_train = get_dataset('E:/malware/vec/train/')
	print(y_train)
