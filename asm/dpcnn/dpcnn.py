import torch.nn as nn


class BasicBlock(nn.Module):
    def __init__(self, input_size, output_size):
        super().__init__()

        self.activation = nn.ReLU()
        self.conv1 = nn.Conv1d(in_channels=input_size, out_channels=output_size, kernel_size=3, padding=2)
        self.conv2 = nn.Conv1d(in_channels=output_size, out_channels=output_size, kernel_size=3, padding=0)
        self.conv3 = nn.Conv1d(in_channels=input_size, out_channels=output_size, kernel_size=1)

    def forward(self, x):
        identity = x

        # Pre-activation
        out = self.activation(x)
        out = self.conv1(out)
        out = self.activation(out)
        out = self.conv2(out)

        if out.shape != identity.shape:
            identity = self.conv3(identity)
        out += identity

        return out


class DPCNN(nn.Module):
    def __init__(self):
        super().__init__()

        """--------First Block--------"""
        self.first_block = BasicBlock(100, 250)

        """--------Repeat Block 1--------"""
        # Downsampling
        self.pool_block1 = nn.MaxPool1d(kernel_size=1, stride=2)
        self.basic_block1 = BasicBlock(input_size=250, output_size=250)

        """--------Repeat Block 2--------"""
        # Downsampling
        self.pool_block2 = nn.MaxPool1d(kernel_size=1, stride=2)
        self.basic_block2 = BasicBlock(input_size=250, output_size=250)

        """--------Repeat Block 3--------"""
        # Downsampling
        self.pool_block3 = nn.MaxPool1d(kernel_size=1, stride=2)
        self.basic_block3 = BasicBlock(input_size=250, output_size=250)

        """--------Repeat Block 4--------"""
        # Downsampling
        self.pool_block4 = nn.MaxPool1d(kernel_size=1, stride=2)
        self.basic_block4 = BasicBlock(input_size=250, output_size=250)

        self.output = nn.Conv1d(in_channels=250, out_channels=9, kernel_size=1)

    def forward(self, x):
        first_block = self.first_block(x)

        block_1 = self.basic_block1(self.pool_block1(first_block))
        block_2 = self.basic_block2(self.pool_block2(block_1))
        block_3 = self.basic_block3(self.pool_block3(block_2))
        block_4 = self.basic_block4(self.pool_block4(block_3))

        output = self.output(block_4)

        return output
