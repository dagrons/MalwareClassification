import torch.nn as nn


class BasicBlock(nn.Module):
    def __init__(self, input_size, output_size):
        super().__init__()

        self.activation = nn.ReLU()
        self.conv1 = nn.Conv1d(in_channels=input_size, out_channels=output_size, kernel_size=3, padding=1)
        self.conv2 = nn.Conv1d(in_channels=output_size, out_channels=output_size, kernel_size=3, padding=1)
        self.conv3 = nn.Conv1d(in_channels=input_size, out_channels=output_size, kernel_size=1)

    def forward(self, x):
        identity = x

        # Pre-activation
        out = self.activation(x)
        out = self.conv1(out)
        out = self.activation(out)
        out = self.conv2(out)

        if out.shape != identity.shape:
            identity = self.conv3(identity)
        out += identity

        return out


class DPCNN(nn.Module):
    def __init__(self, input_size):
        super().__init__()

        """--------First Block--------"""
        self.first_block = BasicBlock(input_size, 256)
        self.repeat_blocks = self._generate_repeat_block(8)
        self.fc = nn.Linear(256, 9)

    @staticmethod
    def _generate_repeat_block(num):
        """
        Generate DPCNN repeat blocks.
        :param num: the number of repeat block
        :return: repeat blocks
        """
        layers = []
        for i in range(num):
            repeat_block = nn.Sequential(
                nn.MaxPool1d(kernel_size=3, stride=2, padding=1),
                BasicBlock(input_size=256, output_size=256)
            )
            layers.append(repeat_block)

        return nn.Sequential(*layers)

    def forward(self, x):
        first_block = self.first_block(x)

        output = self.repeat_blocks(first_block)
        output = output.view(output.size(0), -1)
        output = self.fc(output)

        return output
