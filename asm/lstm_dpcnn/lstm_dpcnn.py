import torch
import torch.nn as nn


class BasicBlock(nn.Module):
    def __init__(self, input_size, output_size):
        super().__init__()

        self.activation = nn.ReLU()
        self.conv1 = nn.Conv1d(in_channels=input_size, out_channels=output_size, kernel_size=3, padding=1)
        self.conv2 = nn.Conv1d(in_channels=output_size, out_channels=output_size, kernel_size=3, padding=1)
        self.conv3 = nn.Conv1d(in_channels=input_size, out_channels=output_size, kernel_size=1)

    def forward(self, x):
        identity = x

        out = self.activation(x)
        out = self.conv1(out)
        out = self.activation(out)
        out = self.conv2(out)

        if out.shape != identity.shape:
            identity = self.conv3(identity)

        return nn.ReLU()(out + identity)


class DPCNN(nn.Module):
    def __init__(self, input_size):
        super().__init__()

        """--------First Block--------"""
        self.first_block = BasicBlock(input_size, 256)
        self.repeat_blocks = self._generate_repeat_block(7)
        self.avg_pool = nn.AvgPool1d(kernel_size=2, stride=1)

        # Kaiming He initialization
        for m in self.modules():
            if isinstance(m, nn.Conv1d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')

    @staticmethod
    def _generate_repeat_block(num):
        """
        Generate DPCNN repeat blocks.
        :param num: the number of repeat block
        :return: repeat blocks
        """
        layers = []
        for i in range(num):
            repeat_block = nn.Sequential(
                nn.MaxPool1d(kernel_size=3, stride=2, padding=1),
                BasicBlock(input_size=256, output_size=256)
            )
            layers.append(repeat_block)

        return nn.Sequential(*layers)

    def forward(self, x):
        first_block = self.first_block(x)

        output = self.repeat_blocks(first_block)
        output = self.avg_pool(output)
        output = output.view(output.size(0), -1)

        return output


class LSTM_DPCNN(nn.Module):
    def __init__(self):
        super().__init__()

        """--------LSTM Layer--------"""
        self.lstm = nn.LSTM(input_size=256, hidden_size=128, num_layers=2, batch_first=True, bidirectional=True)
        # self.lstm_output = nn.Linear(256, 9)

        """--------DPCNN Layer--------"""
        self.dpcnn_output = DPCNN(1)

        self.output = nn.Linear(512, 9)

    def forward(self, x):
        lstm, (_, _) = self.lstm(x)
        lstm = torch.transpose(lstm, 2, 1)
        output1 = lstm.view(lstm.size(0), -1)

        output2 = self.dpcnn_output(x)

        output = self.output(torch.cat((output1, output2), 1))

        return output
