from asm.create_data.generate_dataset import get_dataset
from asm.lstm_dpcnn.lstm_dpcnn import LSTM_DPCNN
from tensorboardX import SummaryWriter

import torch.nn as nn
import torch
import torch.utils.data


def train_model(name, model_path, epoch):
    """
    Train the specified model.
    :param name: The name of the model (LSTM_DPCNN, DPCNN or LSTM).
    :param model_path: The path to save model.
    :param epoch: Number of iterations to train model.
    :return: Trained model.
    """
    train_path = input("Please input the path of training data: ")
    if train_path[-1] != '/':
        train_path += '/'
    test_path = input("Please input the path of test data: ")
    if test_path[-1] != '/':
        test_path += '/'

    # get training Dataset
    dataset = get_dataset(train_path)
    # get training DataLoader
    train_loader = torch.utils.data.dataloader.DataLoader(dataset, batch_size=28)

    # get test Dataset
    dataset = get_dataset(test_path)
    # get test DataLoader
    test_loader = torch.utils.data.dataloader.DataLoader(dataset, batch_size=28)

    criterion = nn.CrossEntropyLoss().cuda()

    if name == "DPCNN":
        from asm.dpcnn.dpcnn import DPCNN
        writer = SummaryWriter(comment="DPCNN")
        model = DPCNN().cuda()
    elif name == "LSTM":
        from asm.lstm.lstm import LSTM
        writer = SummaryWriter(comment="LSTM")
        model = LSTM().cuda()
    else:
        writer = SummaryWriter(comment="LSTM_DPCNN")
        model = LSTM_DPCNN().cuda()

    temp = torch.rand(28, 100)
    if name == "LSTM" or name == "LSTM_DPCNN":
        temp = torch.unsqueeze(temp, 1).cuda()
    else:
        temp = torch.unsqueeze(temp, 2).cuda()
    writer.add_graph(model, (temp,))

    optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)

    best_accuracy = 0.0

    step = 0

    for i in range(epoch):
        print("epoch:", i)
        model.train()
        for j, data in enumerate(train_loader):
            x, y = data
            if name == "LSTM" or name == "LSTM_DPCNN":
                x = torch.unsqueeze(x, 1).cuda()
            else:
                x = torch.unsqueeze(x, 2).cuda()
            y = torch.unsqueeze(y, 1).cuda()

            x_var = torch.autograd.Variable(x)
            y_var = torch.autograd.Variable(y.long())

            prediction = model(x_var)

            loss = criterion(prediction, y_var)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            writer.add_scalar("Loss", loss, step)
            step += 1

        print("--------Validation--------")
        # Calculate the accuracy
        correct = torch.zeros(1).squeeze().cuda()
        total = torch.zeros(1).squeeze().cuda()

        model.eval()
        for j, data in enumerate(test_loader):
            x, y = data

            if name == "LSTM" or name == "LSTM_DPCNN":
                x = torch.unsqueeze(x, 1).cuda()
            else:
                x = torch.unsqueeze(x, 2).cuda()

            y = torch.unsqueeze(y, 1).cuda()

            x_var = torch.autograd.Variable(x)

            output = model(x_var)

            prediction = torch.argmax(output, 1)

            correct += (prediction == y.long()).sum().float()
            total += len(y)

        accuracy = (correct / total).cpu().item()
        print("accuracy:", accuracy)
        writer.add_scalar("Accuracy", accuracy, i)
        if accuracy > best_accuracy:
            # save best model
            torch.save(model, model_path[:-4] + "_best.pth")
            best_accuracy = accuracy

    torch.save(model, model_path)

    writer.close()
