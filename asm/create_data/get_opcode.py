# -*- coding: utf-8 -*-
import os
import re


def get_opcode_sequence(filename):
	"""
	Get opcode sequence from .asm file
	:param filename: The name of .asm file
	:return: The opcode sequence
	"""
	# Save opcode sequences in string arrays
	opcode_seq = []
	# Use regular expression to get all opcodes and combine opcodes into sequences
	p = re.compile(r'\s([a-fA-F0-9]{2}\s)+\s*([a-z]+)')
	with open(filename, errors='ignore') as f:
		for line in f:
			# If a line starts with .text, it is a assembly instruction line
			if line.startswith(".text"):
				m = re.findall(p, line)
				if m:
					opc = m[0][1]
					if opc != "align":
						opcode_seq.append(opc)
	return opcode_seq


def get_all_opcode_seqs(asm_path):
	"""
	Get all opcode sequences from all .asm files, which is used in Doc2Vec.
	:param asm_path: The path of all .asm files.
	:return: All opcode sequences, which is a list.
	"""
	# Construct all instruction in all .asm files
	opcode_seq_list = []
	for file in os.listdir(asm_path):
		opcode_seq = get_opcode_sequence(asm_path + file)
		opcode_seq_list.append(opcode_seq)

	return opcode_seq_list
